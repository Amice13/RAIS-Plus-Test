import{r as D,a as P,g as w}from"./@turf-BykKS3Vs.js";import{r as q}from"./rbush-BiPAbOSX.js";import{r as J}from"./geojson-geometries-CTu26uuk.js";var f,g;function N(){if(g)return f;g=1;const G=q(),m=D().default,x=P().default,p=J(),y="Point",k="LineString",d="Polygon",L="featureCollection";function j(b){switch(b.type){case y:return 0;case k:return 1;case d:return 2;default:throw new TypeError("Unsupported GeoJSON type. Use one of: Point, LineString, Polygon")}}class C{constructor(o,e){e=typeof e=="object"?e:{};const t=new p(o,e);this.D=new Array(3),this.D[0]={list:t.points.features,bboxs:null,lookup:null},this.D[1]={list:t.lines.features,bboxs:null,lookup:null},this.D[2]={list:t.polygons.features,bboxs:null,lookup:null};for(let r=0;r<3;r++){const s=this.D[r];if(s.list.length>0){s.bboxs=new Array(s.list.length),s.lookup=new G;const c=s.list,u=s.bboxs,l=s.lookup;for(let n=0,a=c.length;n<a;n++){const i=m(c[n]);u[n]={minX:i[0],minY:i[1],maxX:i[2],maxY:i[3],id:n}}l.load(u)}}}forEachContainer(o,e,t){e=typeof e=="object"?e:{},t=typeof t=="function"?t:()=>{};let r=0;const s=j(o),c=[e.ignorePoints,e.ignoreLines,e.ignorePolygons];for(let u=s;u<3;u++){if(c[u]===!0)continue;const l=this.D[u];if(l.lookup===null)continue;const n=m(o),a=l.lookup.search({minX:n[0],minY:n[1],maxX:n[2],maxY:n[3]});for(let i=0,E=a.length;i<E;i++){const h=l.list[a[i].id];if(x(h,o)&&(t(h,r),r++,e.limit>0&&e.limit===r))return r}}return r}getContainers(o,e){e=typeof e=="object"?e:{};const t=[];return this.forEachContainer(o,e,r=>t.push(r)),{type:L,features:t}}hasContainers(o,e){return e=typeof e=="object"?e:{},e.limit=1,this.forEachContainer(o,e)===1}countContainers(o,e){return e=typeof e=="object"?e:{},this.forEachContainer(o,e)}}return f=C,f}var O=N();const I=w(O);export{I as G};
